antEx<-read.table("/Users/ScottMac/Downloads/Sparrow/ant_extinction_perct.txt", header=T, sep='\t')
names(antEx)
str(antEx)
antEx$group
antEx$plant_extinction
antEx$ant_extinctionantEx$lower
antEx$upper
antEx$country
aEcx<-ggplot(data=antEx, aes(x=ant_extinction, y=plant_extinction, group=group, colour=group))+
geom_line()+
geom_point()+
geom_errorbar(aes(x=ant_extinction,
ymin=antEx$plant_extinction-lower,
ymax=antEx$plant_extinction+upper),
width=0.1)
require(ggplot2)
aEcx<-ggplot(data=antEx, aes(x=ant_extinction, y=plant_extinction, group=group, colour=group))+
geom_line()+
geom_point()+
geom_errorbar(aes(x=ant_extinction,
ymin=antEx$plant_extinction-lower,
ymax=antEx$plant_extinction+upper),
width=0.1)
aEcx
ggplot(data=antEx, aes(x=ant_extinction, y=plant_extinction, group=group, colour=group))+
geom_line()+
geom_point()+
geom_errorbar(aes(x=ant_extinction,
ymin=antEx$plant_extinction-lower,
ymax=antEx$plant_extinction+upper),
width=0.1)
str(antEx)
ggplot(data=antEx, aes(x=ant_extinction, y=plant_extinction, group=group, colour=group))+
geom_line()+
geom_point()
ggplot(data=antEx, aes(x=ant_extinction, y=plant_extinction, group=group, colour=group))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=antEx$plant_extinction-lower,
ymax=antEx$plant_extinction+upper),
width=0.1)
ggplot(data=antEx, aes(x=ant_extinction, y=plant_extinction, group=group, colour=group))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=plant_extinction-lower,
ymax=plant_extinction+upper),
width=0.1)
str(antEx)
antEx$lower <- as.factor(antEx$lower)
antEx$upper <- as.factor(antEx$upper)
str(antEx)
antEx$lower <- as.numeric(antEx$lower)
antEx$upper <- as.numeric(antEx$upper)
str(antEx)
antEx$lower
antEx<-read.table("/Users/ScottMac/Downloads/Sparrow/ant_extinction_perct.txt", header=T, sep='\t')
antEx$lower
antEx$lower <- as.numeric(as.character(antEx$lower))
antEx$lower
antEx$upper <- as.numeric(as.character(antEx$upper))
antEx$upper
antEx[-c(35,123),]
antEx <- antEx[-c(35,123),]
str(antEx)
ggplot(data=antEx, aes(x=ant_extinction, y=plant_extinction, group=group, colour=group))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=plant_extinction-lower,
ymax=plant_extinction+upper),
width=0.1)
ggplot(data=antEx, aes(x=ant_extinction, y=plant_extinction, group=group, colour=group))+
geom_line() +
geom_point() +
geom_errorbar(aes(x=ant_extinction,
ymin=plant_extinction-lower,
ymax=plant_extinction+upper),
width=0.1)
antEx$upper
antEx$upper <- antEx$upper*100
antEx$upper
ggplot(data=antEx, aes(x=ant_extinction, y=plant_extinction, group=group, colour=group))+
geom_line() +
geom_point() +
geom_errorbar(aes(x=ant_extinction, # you shouldn't need this x= statement
ymin=plant_extinction-lower,
ymax=plant_extinction+upper),
width=0.1)
antEx<-read.table("/Users/ScottMac/Downloads/Sparrow/ant_extinction_perct.txt", header=T, sep='\t')
antEx$lower <- as.numeric(as.character(antEx$lower))
antEx$upper <- as.numeric(as.character(antEx$upper))
str(antEx)
ggplot(data=antEx, aes(x=ant_extinction, y=plant_extinction, group=group, colour=group))+
geom_line() +
geom_point() +
scale_y_log10() +
geom_errorbar(aes(x=ant_extinction, # you shouldn't need this x= statement
ymin=plant_extinction-lower,
ymax=plant_extinction+upper),
width=0.1)
install.packages("RImageJ")
require(RImageJ)
logo <- system.file("images", "R.jpg", package = "RImageJ")
image <- IJ$openImage(logo)
image$show()
citation(package="lavaan")
install.packages("crn")
require(crn)
downloadCRN( url = CRN.HOURLY.URL, directory = HOURLY_DIR )
require(mvabund)
data(Tasmania)
attach(Tasmania)
tasmvabund <- mvabund(Tasmania$copepods)
plot(tasmvabund ~treatment, col 1= as.umeric(lock))
tas.nb <- manyglm(copepods ~ block*treatment, family="negative.binomial")
tas.nb
plot(tas.nb)
plot(tasmvabund ~ treatment, col = as.numeric(lock))
plot(tasmvabund ~ treatment, col = as.numeric(block))
plot(tas.nb)
require(mvabund)
data(Tasmania)
attach(Tasmania)
tasmvabund <- mvabund(Tasmania$copepods)
plot(tasmvabund ~ treatment, col = as.numeric(block))
plot(tasmvabund ~ treatment, col = as.numeric(block))
options()
options()
taxoncount <- function(sciname = NULL, rank = NULL, datakey = NULL,
url = 'http://data.gbif.org/ws/rest/taxon/count?',
...,
curl = getCurlHandle() )
{
if(!is.null(sciname)) {
sciname2 <- paste("scientificname=", sub(" ", "+", sciname), sep = "")} else
{sciname2 <- NULL}
if(!is.null(rank)){
rank2 <- paste("rank=", rank, sep = "")} else
{rank2 <- NULL}
if(!is.null(datakey)){
datakey2 <- paste("dataresourcekey=", datakey, sep = "")} else
{datakey2 <- NULL}
args <- paste(sciname2, rank2, datakey2, sep = "&")
url2 <- paste(url, args, sep = "")
tt <- getURLContent(url2)
out <- xmlTreeParse(tt)$doc$children$gbifResponse
out2 <- as.numeric(xmlToList(out)[[8]])
return(out2)
}
taxoncount("Puma concolor")
require(RCurl)
require(XML)
require(plyr)
taxoncount("Puma concolor")
#' Get values to be used for rank arguments.
#' @param  None
#' @export
#' @examples \dontrun{
#' rank()
#' }
rank <- function()
{
c(
'kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'species',
'infraspecific'
)
}
rank()
#' Search for taxa in GBIF
#'
#' Search for a taxon using scientific name. Optionally, include taxonomic
#' rank in the search.
#'
#' @import XML RCurl
#' @param sciname  scientitic name of taxon (character, see example)
#' @param rank  rank of taxon, see rank() (character)
#' @param maxresults  return at most the specified number of records. The
#'    default (and maximum supported) is 1000 records.
#' @param url the base GBIF API url for the function (should be left to default)
#' @param ... optional additional curl options (debugging tools mostly)
#' @param curl If using in a loop, call getCurlHandle() first and pass
#'  the returned value in here (avoids unnecessary footprint)
#' @export
#' @examples \dontrun{
#' taxonsearch(sciname = "Puma concolor")
#' }
taxonsearch <- function(sciname = NA, rank = NA, maxresults = 10,
url = 'http://data.gbif.org/ws/rest/taxon/list?',
...,
curl = getCurlHandle())
{
if(!is.na(sciname)) {sciname2 <- paste('scientificname=', sub(" ", "+", sciname), sep='')} else
{sciname2 <- NULL}
if(!is.na(rank)) {rank2 <- paste('&rank=', rank, sep='')} else
{rank2 <- NULL}
maxresults2 <- paste('&maxresults=', maxresults, sep='')
args <- paste(sciname2, rank2, maxresults2, sep='')
query <- paste(url, args, sep='')
tt <- getURL(query,
...,
curl = curl)
xmlTreeParse(tt)$doc$children$gbifResponse
}
# out <- taxonsearch(sciname = "Accipiter erythronemius", maxresults = 1000)
# tt_ <- xmlToList(out)
# tt_$header$statements
# url2 <- 'http://data.gbif.org/ws/rest/taxon/list?scientificname=Accipiter+erythronemius&maxresults=10'
# xmlTreeParse(getURL(url2))
taxonsearch(sciname = "Puma concolor")
roxygenize("/Users/ScottMac/github/ropensci/rgbif")
require(roxygen2)
roxygenize("/Users/ScottMac/github/ropensci/rgbif")
roxygenize("/Users/ScottMac/github/ropensci/rgbif")
roxygenize("/Users/ScottMac/github/ropensci/rgbif")
roxygenize("/Users/ScottMac/github/ropensci/rgbif")
#' getoccurrence - description
#' @import RCurl XML
#' @param key numeric key uniquely identifying the occurrence record within the GBIF
#' @param stylesheet sets the URL of the stylesheet to be associated with the response document
#' @param format specifies the format in which the records are to be returned, one of: brief, darwin or kml (character)
#' @param mode specifies whether the response data should (as far as possible) be the raw values originally retrieved from the data resource or processed (normalised) values used within the data portal (character)
#' @param url the base GBIF API url for the function (should be left to default)
#' @param ... optional additional curl options (debugging tools mostly)
#' @param curl If using in a loop, call getCurlHandle() first and pass
#'  the returned value in here (avoids unnecessary footprint)
#' @export
#' @examples \dontrun{
#' getoccurrence(key = 13749100)
#' }
getoccurrence <- function(key = NA, style = NA, format = NA, mode = NA,
url = 'http://data.gbif.org/ws/rest/occurrence/get?',
...,
curl = getCurlHandle())
{
if(!is.na(key)) {key2 <- paste('key=', key, sep='')} else
{key2 <- NULL}
if(!is.na(style)) {style2 <- paste('stylesheet=', style, sep='')} else
{style2 <- NULL}
if(!is.na(format)) {format2 <- paste('format=', format, sep='')} else
{format2 <- NULL}
if(!is.na(mode)) {mode2 <- paste('mode=', mode, sep='')} else
{mode2 <- NULL}
args <- paste(key2, style2, format2, mode2, sep='&')
query <- paste(url, args, sep='')
tt <- getURL(query,
...,
curl = curl)
xmlTreeParse(tt)$doc$children$gbifResponse
}
# tt <- getoccurrence(key = 13850822)
# tt_ <- xmlTreeParse(tt)
# xmlTreeParse(tt_)
# getNodeSet
#
# #
#
#
#   if(!is.null(sciname)) {
#     sciname2 <- paste("scientificname=", sub(" ", "+", sciname), sep = "")} else
#       {sciname2 <- NULL}
#   if(!is.null(rank)){
#     rank2 <- paste("rank=", rank, sep = "")} else
#       {rank2 <- NULL}
#   if(!is.null(datakey)){
#     datakey2 <- paste("dataresourcekey=", datakey, sep = "")} else
#       {datakey2 <- NULL}
#   args <- paste(sciname2, rank2, datakey2, sep = "&")
#   url2 <- paste(url, args, sep = "")
#   tt <- getURLContent(url2)
#   out <- xmlTreeParse(tt)$doc$children$gbifResponse
#   out2 <- as.numeric(xmlToList(out)[[8]])
#   return(out2)
# }
getoccurrence(key = 13749100)
taxonsearch(sciname = "Puma concolor")
roxygenize("/Users/ScottMac/github/ropensci/rgbif")
out <- getURL("http://data.gbif.org/ws/rest/provider/list?name=&stylesheet=")
length(out)
xmlTreeParse(out)
out2 <- xmlTreeParse(out)$doc$children$gbifResponse
length(out2)
length(out2[[2]])
out2[[2]][[1]]
out2[[2]][[1]]$name
xpathApply(out2[[2]][[1]], "//gbif:name")
getNodeSet(out2[[2]][[1]], "//gbif:name")
getNodeSet(out2[[2]], "//gbif:name")
xmlValue(out2[[2]][[1]], "//gbif:name", )
xmlValue(out2[[2]][[1]], "//gbif:name")
xpathApply(out2[[2]][[1]], "//gbif:name")
out2[[2]][[1]]
getNodeSet(out2[[2]][[1]], "//gbif:name")
getNodeSet(out2[[2]][[1]], "//gbif/name")
getNodeSet(out2[[2]][[1]], "//gbif//name")
xmlToList(out2[[2]][[1]])
d <- xmlToList(out2[[2]][[1]])
d$name
attr(d)
xmlAttrs(d)
d$.attrs
d$.attrs['gbifKey']
d$.attrs[['gbifKey']]
d$name
dodo <- function(x) {
d <- xmlToList(out2[[2]])
data.frame(provider = d$name,
dataproviderkey = as.numeric(d$.attrs[['gbifKey']]))
}
dodo <- function(x) {
d <- xmlToList(x)
data.frame(provider = d$name,
dataproviderkey = as.numeric(d$.attrs[['gbifKey']]))
}
dodo(out2[[2]][[2]])
llply(out2[[2]][1:2])
llply(out2[[2]][1:2], dodo)
ldply(out2[[2]][1:2], dodo)
providers <- ldply(out2[[2]], dodo)
providers
length(out2[[2]])
providers <- ldply(out2[[2]][1:388], dodo)
providers
providers
providers[,-1]
write.csv(providers[,-1],
"/Users/ScottMac/github/rOpenSci/rgbif/data/providers.csv",
row.names=F)
save(providers[,-1],
"/Users/ScottMac/github/rOpenSci/rgbif/data/providers.rda",
row.names=F)
providers[,-1]
setwd("/Users/ScottMac/github/rOpenSci/rgbif/data/")
save(providers[,-1], "providers.rda")
save(providers[,-1], file="providers.rda")
save(prr, file="providers.rda")
prr <- providers[,-1]
save(prr, file="providers.rda")
roxygenize("/Users/ScottMac/github/ropensci/rgbif")
roxygenize("/Users/ScottMac/github/ropensci/rgbif")
outt <- getURL("http://data.gbif.org/ws/rest/resource/list?name=&stylesheet=")
length(outt)
outt2 <- xmlTreeParse(outt)$doc$children$gbifResponse
length(outt2[[2]])
outt2
outt2[[2]]
outt2[[2]][[1]]
outt2[[2]][[1]]
